name: Secrets workflow 

env:
  TF_VAR_TOTESYS_HOST: ${{ secrets.TOTESYS_HOST }}
  TF_VAR_TOTESYS_PORT: ${{ secrets.TOTESYS_PORT }}
  TF_VAR_TOTESYS_DATABASE: ${{ secrets.TOTESYS_DATABASE }}
  TF_VAR_TOTESYS_USER: ${{ secrets.TOTESYS_DB_USER }}
  TF_VAR_TOTESYS_PASSWORD: ${{ secrets.TOTESYS_PASSWORD }}

  TF_VAR_DATA_WAREHOUSE_HOST: ${{ secrets.DATA_WAREHOUSE_HOST }}
  TF_VAR_DATA_WAREHOUSE_PORT: ${{ secrets.DATA_WAREHOUSE_PORT }}
  TF_VAR_DATA_WAREHOUSE_DATABASE: ${{ secrets.DATA_WAREHOUSE_DATABASE }}
  TF_VAR_DATA_WAREHOUSE_USER: ${{ secrets.DATA_WAREHOUSE_USER }}
  TF_VAR_DATA_WAREHOUSE_PASSWORD: ${{ secrets.DATA_WAREHOUSE_PASSWORD }}

  TF_VAR_EMAIL: ${{ secrets.EMAIL }}  

on: 
  push: 
    branches:
      - main
  pull_request:
  
  workflow_dispatch:
    inputs:
        environment:
            type: string
            default: dev
            required: false

jobs:
  run-tests: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install system dependencies
      run:
        sudo apt-get update
        sudo apt-get install -y make
    - name: Set up Python virtual environment and instal dependencies
      run:
        make requirements
    - name: Run full code quality, test and coverage checks
      run:
        make run-checks
    - name: Archive coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.txt

  deploy-dev:
    # only runs if push or pull request happens to main branch
    if: github.ref == 'refs/heads/main'
    name: deploy-dev
    environment: dev
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: S{{ secrets.AWS_REGION }}
      - name: Install Terraform
        uses: hasicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

    